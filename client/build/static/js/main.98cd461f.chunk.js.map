{"version":3,"sources":["app/pages/home.js","app/pages/login.js","app/pages/data.js","app/App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","react_router_dom","to","variant","Component","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getList","fetch","then","res","json","list","setState","state","length","map","item","Data","getData","data","App","react_router","exact","path","component","Boolean","window","location","hostname","match","render","src_app_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qQAwBeA,0LAlBX,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,0BAEAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAI,WACRL,EAAAC,EAAAC,cAAA,UAAQI,QAAQ,UAAhB,YAIFN,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAI,UACRL,EAAAC,EAAAC,cAAA,UAAQI,QAAQ,UAAhB,qBAZWC,cCgDJC,cAhDb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAYRQ,QAAU,WACRC,MAAM,gBACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIZ,EAAKa,SAAS,CAAED,YAd9BZ,EAAKc,MAAQ,CACXF,KAAM,IAHQZ,mFAShBG,KAAKI,2CAUE,IACCK,EAAST,KAAKW,MAAdF,KAER,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,wBAECoB,EAAKG,OACJzB,EAAAC,EAAAC,cAAA,WAEGoB,EAAKI,IAAI,SAACC,GACT,OACE3B,EAAAC,EAAAC,cAAA,WACGyB,MAMT3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0CAzCQK,aCiCLqB,cA/Bb,SAAAA,EAAYnB,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAe,IAChBlB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiB,GAAAZ,KAAAH,KAAMJ,KAYRoB,QAAU,WACRX,MAAM,gBACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAW,GAAI,OAAIpB,EAAKa,SAAS,CAAEO,YAd9BpB,EAAKc,MAAQ,CACXM,KAAM,IAHQpB,wEAmBT,IACCoB,EAASjB,KAAKW,MAAdM,KAER,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,uBACC4B,UA3BUvB,aCwBJwB,mLARX,OACE/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACEhC,EAAAC,EAAAC,cAXQ,kBACVF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACEhC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpC,IACjCC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAW3B,IAChCR,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAWP,OAMjC,cAbUrB,aCKE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,iBACIzC,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAACwC,EAAD,OAELC,SAASC,eAAe,SDqHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.98cd461f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\n\nclass Home extends Component {\n  render() {\n    return (\n    <div className=\"App\">\n      <h1>Project Home</h1>\n      {/* Link to List.js */}\n      <Link to={'./login'}>\n        <button variant=\"raised\">\n            My List\n        </button>\n      </Link>\n      <Link to={'./data'}>\n        <button variant=\"raised\">\n            Database \n        </button>\n      </Link>\n    </div>\n    );\n  }\n}\nexport default Home;\n","import React, { Component } from 'react';\n\nclass Login extends Component {\n  // Initialize the state\n  constructor(props){\n    super(props);\n    this.state = {\n      list: []\n    }\n  }\n\n  // Fetch the list on first mount\n  componentDidMount() {\n    this.getList();\n  }\n\n  // Retrieves the list of items from the Express app\n  getList = () => {\n    fetch('/api/getList')\n    .then(res => res.json())\n    .then(list => this.setState({ list }))\n  }\n\n  render() {\n    const { list } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>Login page</h1>\n        {/* Check to see if any items are found*/}\n        {list.length ? (\n          <div>\n            {/* Render the list of items */}\n            {list.map((item) => {\n              return(\n                <div>\n                  {item}\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          <div>\n            <h2>No List Items Found</h2>\n          </div>\n        )\n      }\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\n\nclass Data extends Component {\n  // Initialize the state\n  constructor(props){\n    super(props);\n    this.state = {\n      data: {}\n    }\n  }\n\n  // Fetch the list on first mount\n  // componentDidMount() {\n  //   this.getData();\n  // }\n\n  // Retrieves the list of items from the Express app\n  getData = () => {\n    fetch('/api/getData')\n    .then(res => res.json())\n    .then(data => this.setState({ data }))\n  }\n\n  render() {\n    const { data } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>Data page</h1>\n        {data}\n      </div>\n    );\n  }\n}\n\nexport default Data;\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Home from './pages/home';\nimport Login from './pages/login';\nimport Data from './pages/data'\n\nclass App extends Component {\n  render() {\n    const App = () => (\n      <div>\n        <Switch>\n          <Route exact path='/' component={Home}/>\n          <Route path='/login' component={Login}/>\n          <Route path='/data' component={Data}/>\n        </Switch>\n      </div>\n    )\n    return (\n      <Switch>\n        <App/>\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nrender((\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>\n), document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}